<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Properties used elsewhere in configuration -->

    <define name="accesslog.format" class="com.atlassian.stash.internal.logback.AccessLogFormatPropertyDefiner"
            scope="context"/>
    <define name="home.dir" class="com.atlassian.stash.internal.logback.HomeDirectoryPropertyDefiner"
            scope="context"/>
    <define name="log.format" class="com.atlassian.stash.internal.logback.LogFormatPropertyDefiner"
            scope="context"/>
    <define name="profilelog.format" class="com.atlassian.stash.internal.logback.ProfileLogFormatPropertyDefiner"
            scope="context"/>

    <!-- Logging appenders -->

    <if condition='isDefined("home.dir")'>
        <then>
            <define name="log.dir" class="com.atlassian.stash.internal.logback.LogDirectoryPropertyDefiner"
                    scope="context"/>

            <!-- If the home.dir property is defined, it means we have a valid Stash home. Set up appenders that will
                 produce logging in the configured directory and add them appropriately. -->

            <appender name="stash.application" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${log.format}</pattern>
                </encoder>
                <file>${log.dir}/atlassian-stash.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${log.dir}/atlassian-stash-%d.log</fileNamePattern>
                    <maxHistory>31</maxHistory>
                </rollingPolicy>
            </appender>

            <appender name="stash.profiler" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${profilelog.format}</pattern>
                </encoder>
                <file>${log.dir}/atlassian-stash-profiler.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${log.dir}/atlassian-stash-profiler-%d.%i.log</fileNamePattern>
                    <maxHistory>3</maxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>25MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name="stash.accesslog" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${accesslog.format}</pattern>
                </encoder>
                <file>${log.dir}/atlassian-stash-access.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${log.dir}/atlassian-stash-access-%d.%i.log</fileNamePattern>
                    <maxHistory>10</maxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>25MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name="stash.auditlog" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>%m%n</pattern>
                </encoder>
                <file>${log.dir}/audit/atlassian-stash-audit.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${log.dir}/audit/atlassian-stash-audit-%d.%i.log.gz</fileNamePattern>
                    <maxHistory>100</maxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>25MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <appender name="stash.maillog" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>${log.format}</pattern>
                </encoder>
                <file>${log.dir}/atlassian-stash-mail.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${log.dir}/atlassian-stash-mail-%d.%i.log</fileNamePattern>
                    <maxHistory>10</maxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>25MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
            </appender>

            <!-- Do not set levels here, only add appenders -->
            <root>
                <appender-ref ref="stash.application"/>
            </root>

            <!-- Enable Atlassian Profiling and direct it to its own separate appender -->
            <logger name="com.atlassian.util.profiling" level="DEBUG" additivity="false">
                <appender-ref ref="stash.profiler"/>
            </logger>

            <!-- Enable access logs and direct it to its own separate appender -->
            <logger name="stash.access-log" level="INFO" additivity="false">
                <appender-ref ref="stash.accesslog"/>
            </logger>

            <!-- Enable audit logs and direct it to its own separate appender -->
            <logger name="stash.audit-log" level="DEBUG" additivity="false">
                <appender-ref ref="stash.auditlog"/>
            </logger>

            <!-- Enable mail logs and direct it to its own separate appender -->
            <logger name="stash.mail-log" level="INFO" additivity="false">
                <appender-ref ref="stash.maillog"/>
            </logger>

            <!-- Lastly, give customers the ability to define *their own* logback.xml which will be processed in
                 addition to this one, giving them the ability to modify logging levels at will without forcing
                 them to modify Stash's files directly.

                 WARNING: Do not use ${home.dir}-style property replacement here. Because the returned String is
                 compiled into Java code by Janino internally, doing so causes backslashes to be removed on Windows
                 and results in logback.xml not being included even if it is present. Calling property("home.dir")
                 returns the same value but does so in a way that is safe to be compiled. -->
            <if condition='new java.io.File(property("home.dir"), "logback.xml").exists()'>
                <then>
                    <!-- Do not do the actual import here! Just set a property indicating we want to. That way,
                         logback.xml in the home directory can change logging levels set in _this_ logback.xml -->
                    <property name="include.local" value="true"/>
                </then>
            </if>
        </then>
        <else>
            <!-- If the log.dir property is not defined, it means there is no Stash home directory. We still want to
                 have our logging visible, so add it to the console instead. -->
            <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>${log.format}</pattern>
                </encoder>
            </appender>

            <!-- Do not set levels here, only add appenders -->
            <root>
                <appender-ref ref="console"/>
            </root>
        </else>
    </if>

    <!-- Following is configuration for different logging levels. Please do *not* setup appenders here. That work
         should be done above, inside the <if/> directive, so that the correct appenders are added in all cases. -->

    <!-- Configuration for the root logger -->

    <root level="WARN"/>

    <!-- Atlassian logging -->

    <logger name="com.atlassian.stash" level="INFO"/>
    <!-- Reduce Crowd logging -->
    <logger name="com.atlassian.stash.internal.crowd.HibernateUserDao" level="INFO"/>
    <!-- Workaround for JIRA's version of Crowd not supporting incremental sync. See STASH-1932 -->
    <logger name="com.atlassian.crowd.directory.ldap.cache.EventTokenChangedCacheRefresher" level="ERROR"/>
    <!-- Show recovery mode info -->
    <logger name="com.atlassian.crowd.manager.recovery" level="INFO"/>
    <!-- Reduce misleading security logging from Spring Security's remember me support -->
    <logger name="com.atlassian.stash.internal.spring.security.TwilightingRememberMeServices" level="ERROR"/>
    <!-- Suppress warning about missing properties files from our subclassed Spring PropertiesFactoryBean -->
    <logger name="com.atlassian.stash.internal.spring.SystemOverridePropertiesFactoryBean" level="ERROR"/>
    <!-- Reduce warnings about expired OAuth tokens -->
    <logger name="com.atlassian.oauth.serviceprovider.internal.AuthenticatorImpl" level="ERROR"/>
    <!-- Disable warnings about empty files and directories while generating support zips. See STASHDEV-970 -->
    <logger name="com.atlassian.support.tools.salext.bundle.WildcardApplicationFileBundle" level="ERROR"/>
    <!-- Disable all logging for atlassian-templaterenderer CompositeClassLoader. It does not play well with logback and
         causes a StackOverflowError. See STASH-1819 -->
    <logger name="com.atlassian.templaterenderer.velocity.CompositeClassLoader" level="OFF"/>
    <!-- Don't allow the DefaultResourceDependencyResolver logging to drop to DEBUG when the rootLogger is set to DEBUG -->
    <logger name="com.atlassian.plugin.webresource.DefaultResourceDependencyResolver" level="INFO"/>
    <!-- Don't allow the PluginHttpSessionWrapper logging to drop to DEBUG when the rootLogger is set to DEBUG -->
    <logger name="com.atlassian.plugin.servlet.PluginHttpSessionWrapper" level="INFO"/>
    <!-- Disable warnings about unexpected client disconnection -->
    <logger name="org.apache.sshd.server.session.ServerSession" level="ERROR"/>

    <!-- Other libraries and frameworks -->
    <!-- Suppress uninteresting logging from httpclient: STASH-2307 -->
    <logger name="httpclient.wire" level="WARN"/>
    <!-- Suppress uninteresting logging from Liquibase -->
    <logger name="liquibase" level="WARN"/>
    <!-- Suppress uninteresting logging from EhCache -->
    <logger name="net.sf.ehcache" level="WARN"/>
    <!-- Suppress uninteresting logging from velocity -->
    <logger name="org.apache.velocity" level="INFO"/>
    <!-- Suppress uninteresting logging from Hibernate -->
    <logger name="org.hibernate" level="WARN"/>
    <!-- Crowd uses positional HQL, so for the moment warnings about that must be suppressed. -->
    <logger name="org.hibernate.hql.internal.ast.HqlSqlWalker" level="ERROR"/>
    <!-- Hibernate 4 introduces new warnings about resource cleanup, which seems nice until you find out there isn't
         much callers can do to ensure things are registered for it and Hibernate outputs warnings for every resource
         that isn't registered. That's compounded by the fact that what resources Hibernate manages to register itself
         appear to vary by JDBC driver. This suppresses all of those warnings. -->
    <logger name="org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl" level="ERROR"/>
    <!-- Suppress uninteresting logging from Spring -->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.springframework.beans.factory.config.PropertiesFactoryBean" level="ERROR"/>
    <logger name="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl" level="OFF"/>
    <!-- So that we don't get log messages for 404 Not Found conditions -->
    <logger name="org.springframework.web.servlet.PageNotFound" level="OFF"/>
    <!-- Suppress uninteresting logging from TWData -->
    <logger name="org.twdata" level="ERROR"/>

    <!-- If we decided that we should include logback.xml from the home directory, do so here. -->
    <if condition='isDefined("include.local")'>
        <then>
            <include file="${home.dir}/logback.xml"/>
        </then>
    </if>
</configuration>
