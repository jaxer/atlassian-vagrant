CodeMirror.defineMode("haskell",function(J,Q){function K(S,T,R){T(R);return R(S,T)}var D=/[a-z_]/;var O=/[A-Z]/;var L=/\d/;var C=/[0-9A-Fa-f]/;var P=/[0-7]/;var N=/[a-z_A-Z0-9']/;var M=/[-!#$%&*+.\/<=>?@\\^|~:]/;var E=/[(),;[\]`{}]/;var G=/[ \t\v\f]/;function H(T,U){if(T.eatWhile(G)){return null}var S=T.next();if(E.test(S)){if(S=="{"&&T.eat("-")){var R="comment";if(T.eat("#")){R="meta"}return K(T,U,I(R,1))}return null}if(S=="'"){if(T.eat("\\")){T.next()}else{T.next()}if(T.eat("'")){return"string"}return"error"}if(S=='"'){return K(T,U,F)}if(O.test(S)){T.eatWhile(N);if(T.eat(".")){return"qualifier"}return"variable-2"}if(D.test(S)){T.eatWhile(N);return"variable"}if(L.test(S)){if(S=="0"){if(T.eat(/[xX]/)){T.eatWhile(C);return"integer"}if(T.eat(/[oO]/)){T.eatWhile(P);return"number"}}T.eatWhile(L);var R="number";if(T.match(/^\.\d+/)){R="number"}if(T.eat(/[eE]/)){R="number";T.eat(/[-+]/);T.eatWhile(L)}return R}if(S=="."&&T.eat(".")){return"keyword"}if(M.test(S)){if(S=="-"&&T.eat(/-/)){T.eatWhile(/-/);if(!T.eat(M)){T.skipToEnd();return"comment"}}var R="variable";if(S==":"){R="variable-2"}T.eatWhile(M);return R}return"error"}function I(R,S){if(S==0){return H}return function(V,W){var T=S;while(!V.eol()){var U=V.next();if(U=="{"&&V.eat("-")){++T}else{if(U=="-"&&V.eat("}")){--T;if(T==0){W(H);return R}}}}W(I(R,T));return R}}function F(S,T){while(!S.eol()){var R=S.next();if(R=='"'){T(H);return"string"}if(R=="\\"){if(S.eol()||S.eat(G)){T(B);return"string"}if(S.eat("&")){}else{S.next()}}}T(H);return"error"}function B(R,S){if(R.eat("\\")){return K(R,S,F)}R.next();S(H);return"error"}var A=(function(){var R={};function U(V){return function(){for(var W=0;W<arguments.length;W++){R[arguments[W]]=V}}}U("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");U("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>");U("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");U("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");U("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var S=Q.overrideKeywords;if(S){for(var T in S){if(S.hasOwnProperty(T)){R[T]=S[T]}}}return R})();return{startState:function(){return{f:H}},copyState:function(R){return{f:R.f}},token:function(U,T){var S=T.f(U,function(V){T.f=V});var R=U.current();return A.hasOwnProperty(R)?A[R]:S},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});CodeMirror.defineMIME("text/x-haskell","haskell");