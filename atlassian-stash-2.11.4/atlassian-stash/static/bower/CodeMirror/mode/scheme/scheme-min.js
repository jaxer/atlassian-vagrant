CodeMirror.defineMode("scheme",function(){var J="builtin",O="comment",G="string",D="atom",I="number",F="bracket";var M=2;function S(Y){var W={},X=Y.split(" ");for(var V=0;V<X.length;++V){W[X[V]]=true}return W}var E=S("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");var N=S("define let letrec let* lambda");function C(V,W,X){this.indent=V;this.type=W;this.prev=X}function P(X,V,W){X.indentStack=new C(V,W,X.indentStack)}function K(V){V.indentStack=V.indentStack.prev}var B=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);var U=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);var Q=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);var R=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function A(V){return V.match(B)}function H(V){return V.match(U)}function T(W,V){if(V===true){W.backUp(1)}return W.match(R)}function L(V){return V.match(Q)}return{startState:function(){return{indentStack:null,indentation:0,mode:false,sExprComment:false}},token:function(h,X){if(X.indentStack==null&&h.sol()){X.indentation=h.indentation()}if(h.eatSpace()){return null}var d=null;switch(X.mode){case"string":var b,W=false;while((b=h.next())!=null){if(b=='"'&&!W){X.mode=false;break}W=!W&&b=="\\"}d=G;break;case"comment":var b,e=false;while((b=h.next())!=null){if(b=="#"&&e){X.mode=false;break}e=(b=="|")}d=O;break;case"s-expr-comment":X.mode=false;if(h.peek()=="("||h.peek()=="["){X.sExprComment=0}else{h.eatWhile(/[^/s]/);d=O;break}default:var V=h.next();if(V=='"'){X.mode="string";d=G}else{if(V=="'"){d=D}else{if(V=="#"){if(h.eat("|")){X.mode="comment";d=O}else{if(h.eat(/[tf]/i)){d=D}else{if(h.eat(";")){X.mode="s-expr-comment";d=O}else{var Z=null,a=false,g=true;if(h.eat(/[ei]/i)){a=true}else{h.backUp(1)}if(h.match(/^#b/i)){Z=A}else{if(h.match(/^#o/i)){Z=H}else{if(h.match(/^#x/i)){Z=L}else{if(h.match(/^#d/i)){Z=T}else{if(h.match(/^[-+0-9.]/,false)){g=false;Z=T}else{if(!a){h.eat("#")}}}}}}if(Z!=null){if(g&&!a){h.match(/^#[ei]/i)}if(Z(h)){d=I}}}}}}else{if(/^[-+0-9.]/.test(V)&&T(h,true)){d=I}else{if(V==";"){h.skipToEnd();d=O}else{if(V=="("||V=="["){var f="";var c=h.column(),Y;while((Y=h.eat(/[^\s\(\[\;\)\]]/))!=null){f+=Y}if(f.length>0&&N.propertyIsEnumerable(f)){P(X,c+M,V)}else{h.eatSpace();if(h.eol()||h.peek()==";"){P(X,c+1,V)}else{P(X,c+h.current().length,V)}}h.backUp(h.current().length-1);if(typeof X.sExprComment=="number"){X.sExprComment++}d=F}else{if(V==")"||V=="]"){d=F;if(X.indentStack!=null&&X.indentStack.type==(V==")"?"(":"[")){K(X);if(typeof X.sExprComment=="number"){if(--X.sExprComment==0){d=O;X.sExprComment=false}}}}else{h.eatWhile(/[\w\$_\-!$%&*+\.\/:<=>?@\^~]/);if(E&&E.propertyIsEnumerable(h.current())){d=J}else{d="variable"}}}}}}}}}return(typeof X.sExprComment=="number")?O:d},indent:function(V){if(V.indentStack==null){return V.indentation}return V.indentStack.indent},lineComment:";;"}});CodeMirror.defineMIME("text/x-scheme","scheme");