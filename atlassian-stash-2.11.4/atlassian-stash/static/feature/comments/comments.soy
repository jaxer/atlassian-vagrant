{namespace stash.feature}

/**
 * @param? line
 * @param? lineType
 * @param? comments
 * @param commitRange
 * @param? extraClasses
 */
{template .comments}
    <div class="comment-container{if $extraClasses} {$extraClasses}{/if}"
        {if $line} data-line-number="{$line}"{/if}
        {if $lineType} data-line-type="{$lineType}"{/if}
        >
        <div class="panel">
            <ol class="comment-list">
                {if $comments}
                    {foreach $comment in $comments}
                        {call .comment}
                            {param comment: $comment /}
                            {param numOfAncestors: 0 /}
                            {param pullRequest: $commitRange.pullRequest /}
                        {/call}
                    {/foreach}
                {/if}
            </ol>
        </div>
    </div>
{/template}

/**
 * @param comment
 * @param? pullRequest
 * @param? numOfAncestors
 * @param? extraClasses
 */
{template .comment}
    <li class="comment{if $comment.isNew} new{/if}{if $comment.isUnread} unread{/if}{if $comment.isFocused} focused{/if}{if $extraClasses} {$extraClasses}{/if}" data-id="{$comment.id}" data-version="{$comment.version}">
        {call stash.widget.avatar}
            {param size: 'medium' /}
            {param person: $comment.author /}
        {/call}
        {call .commentContent}
            {param comment: $comment /}
            {param pullRequest: $pullRequest /}
        {/call}
        <ol class="replies{if $numOfAncestors >= 7} no-indent{/if}">
            {if $comment.comments}
                {foreach $reply in $comment.comments}
                    {call .comment}
                        {param comment: $reply /}
                        {param pullRequest: $pullRequest /}
                        {param numOfAncestors: ($numOfAncestors + 1) /}
                    {/call}
                {/foreach}
            {/if}
        </ol>
    </li>
{/template}

/**
 * @param comment
 * @param pullRequest
 * @param? hideDelete
 */
{template .commentContent private="true"}
    <div class="content">
        {if $comment.deleted}
            {stash_i18n('stash.web.comment.deleted.detail', 'This comment has been removed by the author.')}
        {else}
            <h3 class="author">
                {call stash.widget.userLink}
                    {param user: $comment.author /}
                {/call}
            </h3>
            <div class="message {$comment.html ? 'markup' : 'plaintext'}" data-text="{$comment.text}">
                {if $comment.html}
                    {$comment.html|noAutoescape}
                {else}
                    <p>{$comment.text}</p>
                {/if}
            </div>
            <ul class="actions">
                <li>
                    <a class="reply" href="#">{stash_i18n('stash.web.comment.reply', 'Reply')}</a>
                </li>
                {if $comment.permittedOperations.editable}
                    <li>
                        <a class="edit" href="#">{stash_i18n('stash.web.comment.edit', 'Edit')}</a>
                    </li>
                {/if}
                {if $comment.permittedOperations.deletable}
                    <li{if $hideDelete or ($comment.comments and length($comment.comments))} class="hidden"{/if}>
                        <a class="delete" href="#">{stash_i18n('stash.web.comment.delete', 'Delete')}</a>
                    </li>
                {/if}
                // No plugin point for 2.11 to avoid breaking changes. Remove this if statement in 3.0
                {if $pullRequest}
                    // Pull request has been deprecated in 2.11 to be optional in 3.0
                    {foreach $item in getWebItems('stash.comments.actions', [
                        'comment': $comment,
                        'pullRequest': $pullRequest
                    ])}
                        <li>
                            {call stash.widget.webItem data="$item"/}
                        </li>
                    {/foreach}
                {/if}
            </ul>
            <ul class="info">
                // Pull request has been deprecated in 2.11 to be optional in 3.0
                {if $pullRequest}
                    {foreach $panelHtml in getWebPanels('stash.comments.info', [
                        'comment': $comment,
                        'pullRequest': $pullRequest
                    ])}
                        <li>
                            {$panelHtml|noAutoescape}
                        </li>
                    {/foreach}
                {/if}
                <li>
                    {if $pullRequest}
                        {let $pullRequestCommentLink: nav_pull_comment($pullRequest.toRef.repository.project.key,
                            $pullRequest.toRef.repository.slug,
                            $pullRequest.id,
                            $comment.id) /}
                        <a class="times" href="{$pullRequestCommentLink}">
                            {call .commentDate}
                                {param comment: $comment /}
                            {/call}
                        </a>
                    {else}
                        <span class="times">
                            {call .commentDate}
                                {param comment: $comment /}
                            {/call}
                        </span>
                    {/if}
                </li>
            </ul>
        {/if}
    </div>
{/template}

/**
 * @param comment
 */
{template .commentDate private="true"}
    {if compare_date($comment.updatedDate, $comment.createdDate) > 0} // is edited
        // it'll look dumb to say "created yesterday, last edited yesterday". Don't show both if they're the same, just tooltip the full date.
        {if format_date($comment.createdDate, 'shortAge') != format_date($comment.updatedDate, 'shortAge')}
            {call .commentEditTimes}
                {param createdDateContent}
                    {call widget.date.shortAge}{param date: $comment.createdDate /}{/call}
                {/param}
                {param updatedDateContent}
                    {call widget.date.shortAge}{param date: $comment.updatedDate /}{/call}
                {/param}
            {/call}
        {else}
            {call widget.date.shortAge}
                {param date: $comment.createdDate /}
                {{param title: stash_i18n('stash.web.comment.createddate.then.updateddate', '{0} (edited {1})',
                                    format_date($comment.createdDate, 'full'), format_date($comment.updatedDate, 'full')) /}}
            {/call}
        {/if}
    {else} // just show created date
        {call widget.date.shortAge}{param date: $comment.createdDate /}{/call}
    {/if}
{/template}


/**
 * @param createdDateContent
 * @param? updatedDateContent
 */
{template .commentEditTimes private="true"}
    {{stash_i18n('stash.web.comment.createddate.then.updateddate', '{0} (edited {1})', $createdDateContent, $updatedDateContent)|noAutoescape}}
{/template}

/**
 * @param? id
 * @param? version
 * @param? text
 * @param? isHidden
 * @param currentUser
 * @param? extraFormClasses
 * @param tips
 */
{template .commentFormListItem}
    <li class="comment-form-container{if $isHidden} hidden{/if}">
        {call .commentForm}
            {param id : $id /}
            {param version : $version /}
            {param text : $text /}
            {param tips: $tips /}
            {param currentUser: $currentUser /}
            {param extraClasses: $extraFormClasses /}
        {/call}
    </li>
{/template}

/**
 * @param? id
 * @param? version
 * @param? text
 * @param currentUser
 * @param? extraClasses
 * @param tips
 */
{template .commentForm}

    <form{if $id} data-id="{$id}" data-version="{$version}"{/if} class="new-comment-form{if $extraClasses} {$extraClasses}{/if}">
    {call stash.widget.avatar}
        {param size: 'medium' /}
        {param person: $currentUser /}
    {/call}
    <div class="content">
        <div class="content-inner">
            {if $text}<input name="old_text" type="hidden" value="{$text}" />{/if}
            <div class="comment-actions">
                {call stash.widget.markup.previewButton}
                    {param descriptionText: stash_i18n('stash.web.diffview.comments.button.preview', 'View a preview of this comment') /}
                {/call}
                {call stash.widget.markup.previewHelp/}
            </div>
            <div class="comment-submit-spinner"></div>
            {call stash.widget.markup.preview/}
            {call widget.aui.form.expandingTextarea}
                {param name: 'text' /}
                {param extraClasses: 'text' /}
                {param initialValue: $text /}
                {param placeholderText: stash_i18n('stash.web.diffview.comments.form.placeholder', 'What do you want to say?') /}
            {/call}
        </div>
        <div class="comment-form-footer">
            <div class="buttons">
                {call stash.buttons.button}
                    {param buttonText: $id ? stash_i18n('stash.web.diffview.comments.button.save', 'Save') : stash_i18n('stash.web.diffview.comments.button.comment', 'Comment') /}
                {/call}
                {call widget.aui.form.cancelButton}
                    {param href: '#' /}
                {/call}
            </div>
            {if length($tips)}
                {call .commentFormTip}{param tips: $tips /}{/call}
            {/if}
        </div>
    </div>
    </form>
{/template}

/**
 * @param tips
 */
{template .commentFormTip}
    <div class="tip">
        <span class="tip-label">{stash_i18n('stash.web.tip', 'Tip: ')}</span>

        {$tips[randomInt(length($tips))]|noAutoescape}
    </div>
{/template}

/**
 */
{template .addCommentTrigger}
    <button class="add-comment-trigger">
        {call stash.widget.icons.icon}
            {param useIconFont: true /}
            {param icon: 'add-comment' /}
            {param accessibilityText: stash_i18n('stash.comments.add.line', 'Add a comment on this line.') /}
        {/call}
    </button>
{/template}

/**
 * The dummy is necessary for CodeMirror to correctly render the gutters
 * when scrolling horizontally and when highlighting the current line
 * (which happens when hovering or when expanding context).
 *
 * @param? relevantContextLines
 */
{template .dummyCommentTrigger}

    /*
     TODO: we need to fix the translatability of this string using Choice Format
    */
    {{let $changeLocation:
        (hasData() and $relevantContextLines) ?
            stash_i18n('stash.comments.disabled.location.specific', 'Comments can only be added within {0} lines of a change', $relevantContextLines) :
            stash_i18n('stash.comments.disabled.location.vague', 'Comments can only be added near a change')
    /}}
    <div
        class="dummy-comment-trigger"
        title="{$changeLocation}"
     ></div>
{/template}


/**
 * @param? comments
 * @param? commitRange
 */
{template .fileComments}
    <div class="file-comments">
        {if $comments and length($comments) > 0}
            {call stash.feature.comments}
                {param comments: $comments /}
                {param commitRange: $commitRange /}
            {/call}
        {/if}
    </div>
{/template}
