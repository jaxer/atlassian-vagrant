{namespace stash.page}

/**
 * @param repository
 * @param sourceRepository
 * @param? additionalPreloadRepositories
 * @param? sourceBranch
 * @param? targetBranch
 * @param? sourceHeadChangeset
 * @param? targetHeadChangeset
 * @param? title
 * @param? description
 * @param? reviewers
 * @param? dataAttributes
 * @param? fieldErrors
 * @param? formErrors
 * @param? existingPullRequest
 * @param? changesetPage
 * @param? pluginFieldsContent
 */
{template .createPullRequest}
{webResourceManager_requireResourcesForContext('stash.page.pullRequest.create')}
{{let $branchesAreIdentical:  $sourceRepository.id == $repository.id and $sourceBranch == $targetBranch/}}
{call stash.layout.focused}
    {param windowTitle: stash_i18n('stash.web.pull-request.create.title', 'Create Pull Request') /}
    {{param contentTitle: stash_i18n('stash.web.pull-request.create.title', 'Create Pull Request') /}}
    {param bodyClass: 'pull-request-create'/}
    {param activeHeaderNav: 'repositories-menu' /}
    {param focusedPageSize: 'xlarge' /}
    {param dataAttributes: $dataAttributes /}
    {param content}
        {call widget.form.xsrfProtectedForm}
            {param action: nav_create_pull($repository.project.key, $repository.slug) /}
            {param extraClass: 'pull-request-create-form' /}
            {param errors: $formErrors/}
            {param longLabels: true /}
            {param additionalErrorContent}
                {if $existingPullRequest}
                    {call widget.aui.message.error}
                        {param content}
                            {{stash_i18n('stash.web.pull-request.create.duplicate.error',
                                'There is already a pull request open between {0} and {1}.', $sourceBranch, $targetBranch)}}{sp}
                            <a title="{$existingPullRequest.title}" href="{nav_pull($repository.project, $repository, $existingPullRequest.id)}">
                                {stash_i18n('stash.web.pull-request.create.duplicate.viewexisting', 'View the pull request')}
                            </a>.
                        {/param}
                    {/call}
                {/if}
            {/param}
            {param autocomplete: 'off' /}
            {param content}
                {if $branchesAreIdentical}
                    {call widget.aui.message.error}
                        {param content: stash_i18n('stash.web.pull-request.create.branches.equal', 'You cannot merge a branch with itself')/}
                    {/call}
                {/if}
                {call stash.feature.repository.sourceTargetSelector}
                    {param sourceTitle: stash_i18n('stash.web.pull-request.source.header', 'Source') /}
                    {param sourceRepository: $sourceRepository /}
                    {param sourceBranch: $sourceBranch /}
                    {param sourceHeadChangeset: $sourceHeadChangeset /}
                    {param targetTitle: stash_i18n('stash.web.pull-request.target.header', 'Destination') /}
                    {param targetRepository: $repository /}
                    {param targetBranch: $targetBranch /}
                    {param targetHeadChangeset: $targetHeadChangeset /}
                {/call}
                <h3>{stash_i18n('stash.web.pull-request.details', 'Pull request details')}</h3>
                {call stash.feature.pullRequest.detailsForm data="all"/}
                {call widget.aui.form.buttons}
                    {param content}
                        {call widget.aui.form.submit}
                            {param id: 'submit-form' /}
                            {param isPrimary: true /}
                            {param label: stash_i18n('stash.web.button.pull-request.create', 'Create pull request') /}
                            {param disabled: (not ($sourceBranch and $targetBranch) or ($branchesAreIdentical))/}
                        {/call}
                        {call widget.aui.form.cancelButton}
                            {param href: nav_repo_browse($sourceRepository.project.key, $sourceRepository.slug) /}
                        {/call}
                    {/param}
                {/call}
                <div id="create-pull-request-commits" {if not $changesetPage or ($branchesAreIdentical)}class="hidden"{/if}>
                    <h3>{stash_i18n('stash.web.pull-request.create.commitslist.heading', 'Commits to be merged')}</h3>
                    {call stash.feature.commits.commitsTable}
                        {param repository: $sourceRepository /}
                        {param changesetPage : $changesetPage/}
                        {param tableId : 'create-pull-request-commits-table'/}
                        {param extraClasses : 'show-merges' /}
                    {/call}
                    <p class="load-more-trigger{if not $changesetPage or $changesetPage.isLastPage} hidden{/if}">
                        <a href="#">{stash_i18n('stash.web.button.load.more', 'Load more')}</a>
                    </p>
                </div>
            {/param}
        {/call}
    {/param}
    {param pageBottomContent}
        <script>require('page/pull-requests-create').onReady(
            {to_json($repository)|noAutoescape},
            {to_json($sourceRepository)|noAutoescape},
            {if $additionalPreloadRepositories}
                [
                {foreach $repo in $additionalPreloadRepositories}
                    {if index($repo) > 0},{/if}
                    {to_json($repo)|noAutoescape}
                {/foreach}
                ]
            {else}
                null
            {/if},
            {lb}
                {if $reviewers}
                    reviewers: {to_json($reviewers, ['avatarSize' : 'xsmall'])|noAutoescape}
                {/if}
            {rb});
        </script>
    {/param}
{/call}
{/template}

/**
 * @param reviewers
 */
{template .extractUsernames private="true"}
    {foreach $reviewer in $reviewers}
        {if index($reviewer)}|!|{/if}
        {$reviewer.name}
    {/foreach}
{/template}
