{namespace stash.page}

/**
 * @param repository
 * @param personalProject
 * @param? toProject
 * @param? forkForm
 * @param? formErrors
 * @param? detailedErrors
 * @param? fieldErrors
 * @param? dataAttributes
 * @param? pluginFieldsContent
 */
{template .forkRepo}
{webResourceManager_requireResourcesForContext('stash.page.repository.fork')}
{call stash.layout.focused}
    {{param windowTitle: stash_i18n('stash.web.repository.fork.title', 'Fork {0} / {1}', $repository.project.name, $repository.name) /}}
    {{param contentTitle: stash_i18n('stash.web.repository.fork.title', 'Fork {0} / {1}', $repository.project.name, $repository.name) /}}
    {param bodyClass: 'fork-repository'/}
    {param activeHeaderNav: 'repositories-menu' /}
    {param focusedPageSize: 'medium' /}
    {param dataAttributes: $dataAttributes /}
    {param content}
        {call widget.form.xsrfProtectedForm}
            {param action: '' /}
            {param errors: $formErrors /}
            {param detailedErrors: $detailedErrors /}
            {param content}
                {foreach $webPanel in getWebPanels('stash.web.repository.fork.beforefields', [ 'repository' : $repository ])}
                    {$webPanel|noAutoescape}
                {/foreach}
                {call widget.aui.form.field}
                    {param id: 'toProjectSelector' /}
                    {param labelContent: stash_i18n('stash.web.repository.fork.project.label', 'Project') /}
                    {param description: stash_i18n('stash.web.repository.fork.project.description', 'Where would you like to fork this repository into?')/}
                    {param required: true /}
                    {param input}
                        {call stash.feature.project.projectSelectorTriggerWithField}
                            {param id: 'toProjectSelector' /}
                            {param fieldName: 'toProjectId' /}
                            {param project: $fieldErrors and $fieldErrors.toProjectId ? null :
                                                ($toProject ? $toProject : $personalProject) /}
                            {param autofocus: true /}
                        {/call}
                    {/param}
                    {param errors: $fieldErrors ? $fieldErrors.toProjectId : null /}
                {/call}
                {call widget.aui.form.text}
                    {param id: 'name' /}
                    {param labelContent: stash_i18n('stash.web.repository.fork.name.label', 'Name') /}
                    {param initialValue: $forkForm ? $forkForm.name : $repository.name /}
                    {param errors: $fieldErrors ? $fieldErrors.name : null /}
                    {param required: true /}
                    {param autocomplete: 'off' /}
                    {param maxLength: 64 /}
                    {param descriptionContent}
                        {stash_i18n('stash.web.repository.fork.name.description', 'The repository\'\'s name will be used to create its URL')}
                        {call stash.feature.repository.cloneUrlGen /}
                    {/param}
                {/call}
                {foreach $webPanel in getWebPanels('stash.web.repository.fork.afterfields', [ 'repository' : $repository ])}
                    {$webPanel|noAutoescape}
                {/foreach}
                {if $pluginFieldsContent}
                    {$pluginFieldsContent |noAutoescape}
                {/if}
                {call widget.aui.form.buttons}
                    {param content}
                        {call widget.aui.form.submit}
                            {param id: 'fork-repo-submit' /}
                            {param isPrimary: true /}
                            {param label: stash_i18n('stash.web.button.fork.repository', 'Fork repository') /}
                        {/call}
                        {call widget.aui.form.cancelButton}
                            {param href: nav_repo_browse($repository.project.key, $repository.slug) /}
                        {/call}
                    {/param}
                {/call}
            {/param}
        {/call}
    {/param}
    {param pageBottomContent}
        <script>require('page/repository-fork').onReady(
            {to_json($repository)|noAutoescape},
            {to_json($personalProject)|noAutoescape},
            '#toProjectSelector');
        </script>
    {/param}
{/call}
{/template}
